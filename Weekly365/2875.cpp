
// 2875. Minimum Size Subarray in Infinite Array

//             You are given a 0 -
//         indexed array nums and an integer target.

//         A 0 -
//         indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.

//         Return the length of the shortest subarray of the array infinite_nums with a sum equal to target.If there is no such subarray return -1.
//          Constraints :

//         1 <=nums.length <= 10pow 5
//     1 <= nums[i] <= 10pow 5
//      1 <= target <= 10pow 9

#include <bits/stdc++.h>
using namespace std;

int minSizeSubarray(vector<int> &nums, int target)
{

    int n = nums.size();
    long long sum2 = 0, ans = 0;
    int mini = INT_MAX;
    for (int i = 0; i < n; i++)
    {
        sum2 += nums[i];
        nums.push_back(nums[i]);
    }
    for (int i = 0; i < n; i++)
    {
        nums.push_back(nums[i]);
    }

    long long div = target / sum2;

    if (div > 1)
    {
        target -= (div - 1) * (long long)sum2;
        ans += (div - 1) * (long long)n;
    }
    long long sum = 0;
    int l = 0;
    mini = INT_MAX;
    for (int i = 0; i < 3 * n; i++)
    {
        sum += nums[i];
        if (target < sum)
        {
            while (sum > target)
            {
                sum -= nums[l];
                l++;
            }
            if (target == sum)
            {
                mini = min(mini, i - l + 1);
            }
        }
        else if (target == sum)
        {
            mini = min(mini, i - l + 1);
        }
    }

    if (mini == INT_MAX)
        return -1;
    return mini + ans;
}

int main()
{

    int n;
    cin >> n;
    vector<int> nums(n);
    int target;
    cin >> target;
    for (int i = 0; i < n; i++)
    {
        cin >> nums[i];
    }
    cout << minSizeSubarray(nums,target) << endl;
}
